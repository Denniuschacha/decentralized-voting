{
  "address": "0x9756E028b96f4DE160FddBA809352c26c2E2BB8E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "candidateId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "position",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "region",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "imageUrl",
          "type": "string"
        }
      ],
      "name": "CandidateAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "phase",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "ElectionPhaseChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "position",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalVotes",
          "type": "uint256"
        }
      ],
      "name": "LiveResultsUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "candidateId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "position",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newVoteCount",
          "type": "uint256"
        }
      ],
      "name": "VoteCast",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "nationalId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "region",
          "type": "string"
        }
      ],
      "name": "VoterRegistered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_party",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_position",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_region",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_imageUrl",
          "type": "string"
        }
      ],
      "name": "addCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_region",
          "type": "string"
        }
      ],
      "name": "addRegion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressUsed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "candidateCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "candidateIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "candidates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "party",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "position",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "region",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "imageUrl",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "voteCount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_candidateId",
          "type": "uint256"
        }
      ],
      "name": "deactivateCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyStop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllRegions",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_position",
          "type": "string"
        }
      ],
      "name": "getCandidatesByPosition",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_region",
          "type": "string"
        }
      ],
      "name": "getCandidatesByRegion",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getElectionStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "regActive",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "votingActive_",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "regStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "regEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "voteStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "voteEnd",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_position",
          "type": "string"
        }
      ],
      "name": "getLiveResults",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "candidateIds_",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "names",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "parties",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "imageUrls",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "voteCounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "totalVotes",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_position",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_region",
          "type": "string"
        }
      ],
      "name": "getRegionalVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_position",
          "type": "string"
        }
      ],
      "name": "getResults",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "candidateIds_",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "names",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "parties",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "imageUrls",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "voteCounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalVoters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_position",
          "type": "string"
        }
      ],
      "name": "getTotalVotesForPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_nationalId",
          "type": "string"
        }
      ],
      "name": "getVoterByNationalId",
      "outputs": [
        {
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "region",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        }
      ],
      "name": "getVoterInfo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "hasVoted",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "region",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "nationalId",
          "type": "string"
        },
        {
          "internalType": "bool[]",
          "name": "votedPositions",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "hasVotedForPosition",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_nationalId",
          "type": "string"
        }
      ],
      "name": "isNationalIdRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "nationalIdToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "regionPositions",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "regions",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_nationalId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_region",
          "type": "string"
        }
      ],
      "name": "registerVoter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registrationActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registrationEnd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registrationStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_registrationStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_registrationEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_votingStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_votingEnd",
          "type": "uint256"
        }
      ],
      "name": "setElectionPeriods",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleRegistration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleVoting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "totalVotesByPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "totalVotesByRegion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_candidateId",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "voterAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voterCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "voters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "hasVoted",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "region",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "nationalId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingEnd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7656c3e66dc6b0d8840216e99e5bd954eb28fc8bafdd6ffc293f9c63df13afda",
  "receipt": {
    "to": null,
    "from": "0x416Eb4C1aeB9A036D60C1fE99b308A3ce5678bd4",
    "contractAddress": "0x9756E028b96f4DE160FddBA809352c26c2E2BB8E",
    "transactionIndex": 77,
    "gasUsed": "3581550",
    "logsBloom": "0x
    "blockHash": "0xa0db0c091387eb16ae6cc615834b39a07ac2d9f5487f5267260fd011fc08cf33",
    "transactionHash": "0x7656c3e66dc6b0d8840216e99e5bd954eb28fc8bafdd6ffc293f9c63df13afda",
    "logs": [],
    "blockNumber": 9063685,
    "cumulativeGasUsed": "16645558",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD6C9D7C75F78d9175fD4e97927502f3EE169ec86"
  ],
  "numDeployments": 1,
  "solcInputHash": "b351bbff7d184a7440e555308de5877c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"candidateId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"position\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"}],\"name\":\"CandidateAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"phase\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"ElectionPhaseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"position\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"}],\"name\":\"LiveResultsUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"candidateId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"position\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVoteCount\",\"type\":\"uint256\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"nationalId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"name\":\"VoterRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_party\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_position\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_region\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_imageUrl\",\"type\":\"string\"}],\"name\":\"addCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_region\",\"type\":\"string\"}],\"name\":\"addRegion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candidateCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"candidateIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"candidates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"party\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"position\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_candidateId\",\"type\":\"uint256\"}],\"name\":\"deactivateCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyStop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllRegions\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_position\",\"type\":\"string\"}],\"name\":\"getCandidatesByPosition\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_region\",\"type\":\"string\"}],\"name\":\"getCandidatesByRegion\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getElectionStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"regActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"votingActive_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"regStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"regEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteEnd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_position\",\"type\":\"string\"}],\"name\":\"getLiveResults\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"candidateIds_\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"parties\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"imageUrls\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"voteCounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_position\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_region\",\"type\":\"string\"}],\"name\":\"getRegionalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_position\",\"type\":\"string\"}],\"name\":\"getResults\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"candidateIds_\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"parties\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"imageUrls\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"voteCounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalVoters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_position\",\"type\":\"string\"}],\"name\":\"getTotalVotesForPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_nationalId\",\"type\":\"string\"}],\"name\":\"getVoterByNationalId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"getVoterInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nationalId\",\"type\":\"string\"},{\"internalType\":\"bool[]\",\"name\":\"votedPositions\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"hasVotedForPosition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_nationalId\",\"type\":\"string\"}],\"name\":\"isNationalIdRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"nationalIdToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"regionPositions\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"regions\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_nationalId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_region\",\"type\":\"string\"}],\"name\":\"registerVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrationActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrationEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrationStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_registrationStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_registrationEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votingStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votingEnd\",\"type\":\"uint256\"}],\"name\":\"setElectionPeriods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleRegistration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"totalVotesByPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"totalVotesByRegion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_candidateId\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voterAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voterCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nationalId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/YourContract.sol\":\"YourContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/YourContract.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\n// Useful for debugging. Remove when deploying to a live network.\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract YourContract {\\r\\n    // Election administrator\\r\\n    address public admin;\\r\\n    \\r\\n    // Election state\\r\\n    bool public votingActive = false;\\r\\n    bool public registrationActive = false;\\r\\n    \\r\\n    // Voting periods\\r\\n    uint256 public registrationStart;\\r\\n    uint256 public registrationEnd;\\r\\n    uint256 public votingStart;\\r\\n    uint256 public votingEnd;\\r\\n    \\r\\n    // Structs\\r\\n    struct Voter {\\r\\n        bool isRegistered;\\r\\n        bool hasVoted;\\r\\n        string region; // State/Province/Region identifier\\r\\n        string nationalId; // National ID for unique identification\\r\\n        address voterAddress;\\r\\n    }\\r\\n    \\r\\n    struct Candidate {\\r\\n        uint256 id;\\r\\n        string name;\\r\\n        string party;\\r\\n        string position; // \\\"president\\\", \\\"senator\\\", \\\"governor\\\"\\r\\n        string region; // Empty for president, specific region for others\\r\\n        string imageUrl; // URL to candidate's image\\r\\n        uint256 voteCount;\\r\\n        bool isActive;\\r\\n    }\\r\\n    \\r\\n    // Mappings\\r\\n    mapping(address => Voter) public voters;\\r\\n    mapping(string => address) public nationalIdToAddress; // nationalId => wallet address\\r\\n    mapping(address => bool) public addressUsed; // prevent address reuse\\r\\n    mapping(uint256 => Candidate) public candidates;\\r\\n    mapping(address => mapping(string => bool)) public hasVotedForPosition; // voter => position => hasVoted\\r\\n    mapping(string => string[]) public regionPositions; // region => available positions\\r\\n    \\r\\n    // Live results tracking\\r\\n    mapping(string => uint256) public totalVotesByPosition; // position => total votes cast\\r\\n    mapping(string => mapping(string => uint256)) public totalVotesByRegion; // position => region => total votes\\r\\n    \\r\\n    // Arrays\\r\\n    address[] public voterAddresses;\\r\\n    uint256[] public candidateIds;\\r\\n    string[] public regions;\\r\\n    \\r\\n    // Counters\\r\\n    uint256 public candidateCount = 0;\\r\\n    uint256 public voterCount = 0;\\r\\n    \\r\\n    // Events\\r\\n    event VoterRegistered(address indexed voter, string nationalId, string region);\\r\\n    event CandidateAdded(uint256 indexed candidateId, string name, string position, string region, string imageUrl);\\r\\n    event VoteCast(address indexed voter, uint256 indexed candidateId, string position, uint256 newVoteCount);\\r\\n    event ElectionPhaseChanged(string phase, bool active);\\r\\n    event LiveResultsUpdate(string position, uint256 totalVotes);\\r\\n    \\r\\n    // Modifiers\\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == admin, \\\"Only admin can perform this action\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier onlyDuringRegistration() {\\r\\n        require(registrationActive, \\\"Registration is not active\\\");\\r\\n        require(block.timestamp >= registrationStart && block.timestamp <= registrationEnd, \\\"Outside registration period\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier onlyDuringVoting() {\\r\\n        require(votingActive, \\\"Voting is not active\\\");\\r\\n        require(block.timestamp >= votingStart && block.timestamp <= votingEnd, \\\"Outside voting period\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier onlyRegisteredVoter() {\\r\\n        require(voters[msg.sender].isRegistered, \\\"Voter not registered\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    constructor(address _admin) {\\r\\n        admin = _admin;\\r\\n    }\\r\\n    \\r\\n    // Admin functions\\r\\n    function setElectionPeriods(\\r\\n        uint256 _registrationStart,\\r\\n        uint256 _registrationEnd,\\r\\n        uint256 _votingStart,\\r\\n        uint256 _votingEnd\\r\\n    ) external onlyAdmin {\\r\\n        require(_registrationStart < _registrationEnd, \\\"Invalid registration period\\\");\\r\\n        require(_registrationEnd < _votingStart, \\\"Registration must end before voting\\\");\\r\\n        require(_votingStart < _votingEnd, \\\"Invalid voting period\\\");\\r\\n        \\r\\n        registrationStart = _registrationStart;\\r\\n        registrationEnd = _registrationEnd;\\r\\n        votingStart = _votingStart;\\r\\n        votingEnd = _votingEnd;\\r\\n    }\\r\\n    \\r\\n    function toggleRegistration() external onlyAdmin {\\r\\n        registrationActive = !registrationActive;\\r\\n        emit ElectionPhaseChanged(\\\"registration\\\", registrationActive);\\r\\n    }\\r\\n    \\r\\n    function toggleVoting() external onlyAdmin {\\r\\n        votingActive = !votingActive;\\r\\n        emit ElectionPhaseChanged(\\\"voting\\\", votingActive);\\r\\n    }\\r\\n    \\r\\n    function addRegion(string memory _region) external onlyAdmin {\\r\\n        regions.push(_region);\\r\\n        // Initialize available positions for this region\\r\\n        regionPositions[_region].push(\\\"president\\\");\\r\\n        regionPositions[_region].push(\\\"senator\\\");\\r\\n        regionPositions[_region].push(\\\"governor\\\");\\r\\n    }\\r\\n    \\r\\n    function addCandidate(\\r\\n        string memory _name,\\r\\n        string memory _party,\\r\\n        string memory _position,\\r\\n        string memory _region,\\r\\n        string memory _imageUrl\\r\\n    ) external onlyAdmin {\\r\\n        require(bytes(_name).length > 0, \\\"Name cannot be empty\\\");\\r\\n        require(bytes(_party).length > 0, \\\"Party cannot be empty\\\");\\r\\n        require(\\r\\n            keccak256(bytes(_position)) == keccak256(bytes(\\\"president\\\")) ||\\r\\n            keccak256(bytes(_position)) == keccak256(bytes(\\\"senator\\\")) ||\\r\\n            keccak256(bytes(_position)) == keccak256(bytes(\\\"governor\\\")),\\r\\n            \\\"Invalid position\\\"\\r\\n        );\\r\\n        \\r\\n        // For president, region should be empty\\r\\n        if (keccak256(bytes(_position)) == keccak256(bytes(\\\"president\\\"))) {\\r\\n            _region = \\\"\\\";\\r\\n        } else {\\r\\n            require(bytes(_region).length > 0, \\\"Region required for non-presidential candidates\\\");\\r\\n        }\\r\\n        \\r\\n        candidateCount++;\\r\\n        candidates[candidateCount] = Candidate({\\r\\n            id: candidateCount,\\r\\n            name: _name,\\r\\n            party: _party,\\r\\n            position: _position,\\r\\n            region: _region,\\r\\n            imageUrl: _imageUrl,\\r\\n            voteCount: 0,\\r\\n            isActive: true\\r\\n        });\\r\\n        \\r\\n        candidateIds.push(candidateCount);\\r\\n        emit CandidateAdded(candidateCount, _name, _position, _region, _imageUrl);\\r\\n    }\\r\\n    \\r\\n    function deactivateCandidate(uint256 _candidateId) external onlyAdmin {\\r\\n        require(_candidateId > 0 && _candidateId <= candidateCount, \\\"Invalid candidate ID\\\");\\r\\n        candidates[_candidateId].isActive = false;\\r\\n    }\\r\\n    \\r\\n    // Voter functions\\r\\n    function registerVoter(string memory _nationalId, string memory _region) external onlyDuringRegistration {\\r\\n        require(!voters[msg.sender].isRegistered, \\\"Voter already registered\\\");\\r\\n        require(!addressUsed[msg.sender], \\\"Address already used\\\");\\r\\n        require(bytes(_nationalId).length > 0, \\\"National ID cannot be empty\\\");\\r\\n        require(bytes(_region).length > 0, \\\"Region cannot be empty\\\");\\r\\n        require(isValidRegion(_region), \\\"Invalid region\\\");\\r\\n        require(nationalIdToAddress[_nationalId] == address(0), \\\"National ID already registered\\\");\\r\\n        \\r\\n        voters[msg.sender] = Voter({\\r\\n            isRegistered: true,\\r\\n            hasVoted: false,\\r\\n            region: _region,\\r\\n            nationalId: _nationalId,\\r\\n            voterAddress: msg.sender\\r\\n        });\\r\\n        \\r\\n        nationalIdToAddress[_nationalId] = msg.sender;\\r\\n        addressUsed[msg.sender] = true;\\r\\n        voterAddresses.push(msg.sender);\\r\\n        voterCount++;\\r\\n        \\r\\n        emit VoterRegistered(msg.sender, _nationalId, _region);\\r\\n    }\\r\\n    \\r\\n    function vote(uint256 _candidateId) external onlyDuringVoting onlyRegisteredVoter {\\r\\n        require(_candidateId > 0 && _candidateId <= candidateCount, \\\"Invalid candidate ID\\\");\\r\\n        require(candidates[_candidateId].isActive, \\\"Candidate is not active\\\");\\r\\n        \\r\\n        Candidate storage candidate = candidates[_candidateId];\\r\\n        Voter storage voter = voters[msg.sender];\\r\\n        \\r\\n        // Check if voter already voted for this position\\r\\n        require(!hasVotedForPosition[msg.sender][candidate.position], \\\"Already voted for this position\\\");\\r\\n        \\r\\n        // Check if voter is eligible to vote for this candidate\\r\\n        if (keccak256(bytes(candidate.position)) != keccak256(bytes(\\\"president\\\"))) {\\r\\n            require(\\r\\n                keccak256(bytes(candidate.region)) == keccak256(bytes(voter.region)),\\r\\n                \\\"Cannot vote for candidate outside your region\\\"\\r\\n            );\\r\\n        }\\r\\n        \\r\\n        // Cast vote\\r\\n        candidate.voteCount++;\\r\\n        hasVotedForPosition[msg.sender][candidate.position] = true;\\r\\n        \\r\\n        // Update live results tracking\\r\\n        totalVotesByPosition[candidate.position]++;\\r\\n        if (keccak256(bytes(candidate.position)) != keccak256(bytes(\\\"president\\\"))) {\\r\\n            totalVotesByRegion[candidate.position][voter.region]++;\\r\\n        }\\r\\n        \\r\\n        // Check if voter has voted for all positions\\r\\n        if (hasVotedForAllPositions(msg.sender)) {\\r\\n            voter.hasVoted = true;\\r\\n        }\\r\\n        \\r\\n        emit VoteCast(msg.sender, _candidateId, candidate.position, candidate.voteCount);\\r\\n        emit LiveResultsUpdate(candidate.position, totalVotesByPosition[candidate.position]);\\r\\n    }\\r\\n    \\r\\n    // View functions\\r\\n    function getCandidatesByPosition(string memory _position) external view returns (uint256[] memory) {\\r\\n        uint256[] memory positionCandidates = new uint256[](candidateCount);\\r\\n        uint256 count = 0;\\r\\n        \\r\\n        for (uint256 i = 1; i <= candidateCount; i++) {\\r\\n            if (candidates[i].isActive && \\r\\n                keccak256(bytes(candidates[i].position)) == keccak256(bytes(_position))) {\\r\\n                positionCandidates[count] = i;\\r\\n                count++;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        // Resize array\\r\\n        uint256[] memory result = new uint256[](count);\\r\\n        for (uint256 i = 0; i < count; i++) {\\r\\n            result[i] = positionCandidates[i];\\r\\n        }\\r\\n        \\r\\n        return result;\\r\\n    }\\r\\n    \\r\\n    function getCandidatesByRegion(string memory _region) external view returns (uint256[] memory) {\\r\\n        uint256[] memory regionCandidates = new uint256[](candidateCount);\\r\\n        uint256 count = 0;\\r\\n        \\r\\n        for (uint256 i = 1; i <= candidateCount; i++) {\\r\\n            if (candidates[i].isActive && \\r\\n                (keccak256(bytes(candidates[i].region)) == keccak256(bytes(_region)) ||\\r\\n                 keccak256(bytes(candidates[i].position)) == keccak256(bytes(\\\"president\\\")))) {\\r\\n                regionCandidates[count] = i;\\r\\n                count++;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        // Resize array\\r\\n        uint256[] memory result = new uint256[](count);\\r\\n        for (uint256 i = 0; i < count; i++) {\\r\\n            result[i] = regionCandidates[i];\\r\\n        }\\r\\n        \\r\\n        return result;\\r\\n    }\\r\\n    \\r\\n    function getResults(string memory _position) external view returns (\\r\\n        uint256[] memory candidateIds_,\\r\\n        string[] memory names,\\r\\n        string[] memory parties,\\r\\n        string[] memory imageUrls,\\r\\n        uint256[] memory voteCounts\\r\\n    ) {\\r\\n        // Results now available live during voting\\r\\n        uint256[] memory positionCandidates = this.getCandidatesByPosition(_position);\\r\\n        uint256 count = positionCandidates.length;\\r\\n        \\r\\n        candidateIds_ = new uint256[](count);\\r\\n        names = new string[](count);\\r\\n        parties = new string[](count);\\r\\n        imageUrls = new string[](count);\\r\\n        voteCounts = new uint256[](count);\\r\\n        \\r\\n        for (uint256 i = 0; i < count; i++) {\\r\\n            uint256 candidateId = positionCandidates[i];\\r\\n            candidateIds_[i] = candidateId;\\r\\n            names[i] = candidates[candidateId].name;\\r\\n            parties[i] = candidates[candidateId].party;\\r\\n            imageUrls[i] = candidates[candidateId].imageUrl;\\r\\n            voteCounts[i] = candidates[candidateId].voteCount;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function getVoterInfo(address _voter) external view returns (\\r\\n        bool isRegistered,\\r\\n        bool hasVoted,\\r\\n        string memory region,\\r\\n        string memory nationalId,\\r\\n        bool[] memory votedPositions\\r\\n    ) {\\r\\n        Voter memory voter = voters[_voter];\\r\\n        votedPositions = new bool[](3);\\r\\n        \\r\\n        votedPositions[0] = hasVotedForPosition[_voter][\\\"president\\\"];\\r\\n        votedPositions[1] = hasVotedForPosition[_voter][\\\"senator\\\"];\\r\\n        votedPositions[2] = hasVotedForPosition[_voter][\\\"governor\\\"];\\r\\n        \\r\\n        return (voter.isRegistered, voter.hasVoted, voter.region, voter.nationalId, votedPositions);\\r\\n    }\\r\\n    \\r\\n    function getTotalVoters() external view returns (uint256) {\\r\\n        return voterCount;\\r\\n    }\\r\\n    \\r\\n    function getAllRegions() external view returns (string[] memory) {\\r\\n        return regions;\\r\\n    }\\r\\n    \\r\\n    function getElectionStatus() external view returns (\\r\\n        bool regActive,\\r\\n        bool votingActive_,\\r\\n        uint256 regStart,\\r\\n        uint256 regEnd,\\r\\n        uint256 voteStart,\\r\\n        uint256 voteEnd\\r\\n    ) {\\r\\n        return (\\r\\n            registrationActive,\\r\\n            votingActive,\\r\\n            registrationStart,\\r\\n            registrationEnd,\\r\\n            votingStart,\\r\\n            votingEnd\\r\\n        );\\r\\n    }\\r\\n    \\r\\n    // New functions for live results and voter verification\\r\\n    function getLiveResults(string memory _position) external view returns (\\r\\n        uint256[] memory candidateIds_,\\r\\n        string[] memory names,\\r\\n        string[] memory parties,\\r\\n        string[] memory imageUrls,\\r\\n        uint256[] memory voteCounts,\\r\\n        uint256 totalVotes\\r\\n    ) {\\r\\n        uint256[] memory positionCandidates = this.getCandidatesByPosition(_position);\\r\\n        uint256 count = positionCandidates.length;\\r\\n        \\r\\n        candidateIds_ = new uint256[](count);\\r\\n        names = new string[](count);\\r\\n        parties = new string[](count);\\r\\n        imageUrls = new string[](count);\\r\\n        voteCounts = new uint256[](count);\\r\\n        \\r\\n        for (uint256 i = 0; i < count; i++) {\\r\\n            uint256 candidateId = positionCandidates[i];\\r\\n            candidateIds_[i] = candidateId;\\r\\n            names[i] = candidates[candidateId].name;\\r\\n            parties[i] = candidates[candidateId].party;\\r\\n            imageUrls[i] = candidates[candidateId].imageUrl;\\r\\n            voteCounts[i] = candidates[candidateId].voteCount;\\r\\n        }\\r\\n        \\r\\n        totalVotes = totalVotesByPosition[_position];\\r\\n    }\\r\\n    \\r\\n    function getVoterByNationalId(string memory _nationalId) external view returns (\\r\\n        address voterAddress,\\r\\n        bool isRegistered,\\r\\n        string memory region\\r\\n    ) {\\r\\n        address addr = nationalIdToAddress[_nationalId];\\r\\n        if (addr != address(0)) {\\r\\n            Voter memory voter = voters[addr];\\r\\n            return (addr, voter.isRegistered, voter.region);\\r\\n        }\\r\\n        return (address(0), false, \\\"\\\");\\r\\n    }\\r\\n    \\r\\n    function getTotalVotesForPosition(string memory _position) external view returns (uint256) {\\r\\n        return totalVotesByPosition[_position];\\r\\n    }\\r\\n    \\r\\n    function getRegionalVotes(string memory _position, string memory _region) external view returns (uint256) {\\r\\n        return totalVotesByRegion[_position][_region];\\r\\n    }\\r\\n    \\r\\n    function isNationalIdRegistered(string memory _nationalId) external view returns (bool) {\\r\\n        return nationalIdToAddress[_nationalId] != address(0);\\r\\n    }\\r\\n    \\r\\n    // Helper functions\\r\\n    function isValidRegion(string memory _region) internal view returns (bool) {\\r\\n        for (uint256 i = 0; i < regions.length; i++) {\\r\\n            if (keccak256(bytes(regions[i])) == keccak256(bytes(_region))) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n    \\r\\n    function hasVotedForAllPositions(address _voter) internal view returns (bool) {\\r\\n        return hasVotedForPosition[_voter][\\\"president\\\"] &&\\r\\n               hasVotedForPosition[_voter][\\\"senator\\\"] &&\\r\\n               hasVotedForPosition[_voter][\\\"governor\\\"];\\r\\n    }\\r\\n    \\r\\n    // Emergency functions\\r\\n    function emergencyStop() external onlyAdmin {\\r\\n        votingActive = false;\\r\\n        registrationActive = false;\\r\\n    }\\r\\n    \\r\\n    function transferAdmin(address _newAdmin) external onlyAdmin {\\r\\n        require(_newAdmin != address(0), \\\"Invalid admin address\\\");\\r\\n        admin = _newAdmin;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6f91d0a4668759ef97ba0eb98579d3510dad95c756f57f5b4f989ac7a5c951ba\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0xf2560b5386574153057104d19a9e68a32ee912cf23c0c8df1fe9a0607f42d543\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000805461ffff60a01b1916815560108190556011553480156200002757600080fd5b5060405162003ff538038062003ff58339810160408190526200004a9162000070565b600080546001600160a01b0319166001600160a01b0392909216919091179055620000a2565b6000602082840312156200008357600080fd5b81516001600160a01b03811681146200009b57600080fd5b9392505050565b613f4380620000b26000396000f3fe608060405234801561001057600080fd5b506004361061025e5760003560e01c8063793cf21811610146578063a9a981a3116100c3578063b4e9a8c111610087578063b4e9a8c114610664578063b5a9be8514610677578063bfbda98c1461068b578063d23d08a71461069e578063dd0e2373146106a6578063f851a440146106b957600080fd5b8063a9a981a3146105db578063aa216bef146105e4578063aae3bd4714610630578063b1b9572414610638578063b4062a311461065b57600080fd5b8063945ddfb91161010a578063945ddfb91461054257806397341d59146105555780639e4752e3146105685780639ed1f25514610593578063a3ec138d146105b757600080fd5b8063793cf218146104ba57806381531a2c146104c257806385a38635146104e75780638a4c8847146104f05780638ad1782b1461050357600080fd5b8063375163ea116101df57806350ecf31f116101a357806350ecf31f14610442578063618068861461045557806363a599a41461046857806366c76ad9146104705780636ea0772b1461048557806375829def146104a757600080fd5b8063375163ea146103a75780633de3b5b2146103ef578063405ebe5914610402578063408e27271461041557806342169e481461043957600080fd5b806313446a751161022657806313446a751461032057806320a1a31c14610329578063263088be146103495780632ff20f011461035c5780633477ee2e1461038057600080fd5b80630121b93f146102635780630301613014610278578063101158af1461029e578063122902a6146102a7578063132abfb614610300575b600080fd5b610276610271366004613425565b6106cc565b005b61028b610286366004613425565b610bf1565b6040519081526020015b60405180910390f35b61028b60035481565b6102d160005460015460025460035460045460ff600160a81b8604811695600160a01b9004169495565b6040805196151587529415156020870152938501929092526060840152608083015260a082015260c001610295565b61031361030e366004613425565b610c12565b604051610295919061348e565b61028b60025481565b61033c61033736600461355d565b610cbe565b60405161029591906135d4565b6103136103573660046135e7565b610eab565b61036f61036a36600461355d565b610ef2565b604051610295959493929190613683565b61039361038e366004613425565b6113b3565b6040516102959897969594939291906136f0565b61028b6103b5366004613777565b8151602081840181018051600c82529282019482019490942091909352815180830184018051928152908401929093019190912091525481565b61028b6103fd36600461355d565b6116a0565b6102766104103660046137da565b6116c8565b60005461042990600160a01b900460ff1681565b6040519015158152602001610295565b61028b60115481565b61042961045036600461355d565b6117f7565b61033c61046336600461355d565b611834565b6102766119bb565b6104786119f5565b604051610295919061380c565b61049861049336600461355d565b611ace565b6040516102959392919061381f565b6102766104b5366004613870565b611cb7565b60115461028b565b6104d56104d036600461355d565b611d51565b6040516102959695949392919061388b565b61028b60045481565b6102766104fe366004613777565b612234565b610429610511366004613900565b6009602090815260009283526040909220815180830184018051928152908401929093019190912091525460ff1681565b610276610550366004613943565b6126a5565b610276610563366004613425565b612ab3565b61028b61057636600461355d565b8051602081830181018051600b8252928201919093012091525481565b6105a66105a1366004613870565b612b4d565b604051610295959493929190613a14565b6105ca6105c5366004613870565b612e3f565b604051610295959493929190613a91565b61028b60105481565b6106186105f236600461355d565b80516020818301810180516006825292820191909301209152546001600160a01b031681565b6040516001600160a01b039091168152602001610295565b610276612f8e565b610429610646366004613870565b60076020526000908152604090205460ff1681565b61028b60015481565b61028b610672366004613777565b61303d565b60005461042990600160a81b900460ff1681565b61027661069936600461355d565b613082565b610276613203565b6106186106b4366004613425565b6132ae565b600054610618906001600160a01b031681565b600054600160a01b900460ff166107215760405162461bcd60e51b8152602060048201526014602482015273566f74696e67206973206e6f742061637469766560601b60448201526064015b60405180910390fd5b600354421015801561073557506004544211155b6107795760405162461bcd60e51b815260206004820152601560248201527413dd5d1cda5919481d9bdd1a5b99c81c195c9a5bd9605a1b6044820152606401610718565b3360009081526005602052604090205460ff166107cf5760405162461bcd60e51b8152602060048201526014602482015273159bdd195c881b9bdd081c9959da5cdd195c995960621b6044820152606401610718565b6000811180156107e157506010548111155b6108245760405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a590818d85b991a59185d1948125160621b6044820152606401610718565b60008181526008602052604090206007015460ff166108855760405162461bcd60e51b815260206004820152601760248201527f43616e646964617465206973206e6f74206163746976650000000000000000006044820152606401610718565b60008181526008602090815260408083203384526005835281842060099093529281902090516108b9906003850190613b8e565b9081526040519081900360200190205460ff16156109195760405162461bcd60e51b815260206004820152601f60248201527f416c726561647920766f74656420666f72207468697320706f736974696f6e006044820152606401610718565b60408051808201825260098152681c1c995cda59195b9d60ba1b60209091015251600080516020613eee83398151915290610958906003850190613b8e565b6040518091039020146109fa57806001016040516109769190613b8e565b60405180910390208260040160405161098f9190613b8e565b6040518091039020146109fa5760405162461bcd60e51b815260206004820152602d60248201527f43616e6e6f7420766f746520666f722063616e646964617465206f757473696460448201526c32903cb7bab9103932b3b4b7b760991b6064820152608401610718565b600682018054906000610a0c83613b9a565b90915550503360009081526009602052604090819020905160019190610a36906003860190613b8e565b908152604051908190036020018120805492151560ff1990931692909217909155600b90610a68906003850190613b8e565b9081526040519081900360200190208054906000610a8583613b9a565b909155505060408051808201825260098152681c1c995cda59195b9d60ba1b60209091015251600080516020613eee83398151915290610ac9906003850190613b8e565b604051809103902014610b2b57600c82600301604051610ae99190613b8e565b908152602001604051809103902081600101604051610b089190613b8e565b9081526040519081900360200190208054906000610b2583613b9a565b91905055505b610b34336132d8565b15610b4757805461ff0019166101001781555b82336001600160a01b03167f98e89bf3391103a9810884f4b4d01aa7ea00d566f73696c0e35c6361cb4e6737846003018560060154604051610b8a929190613bc1565b60405180910390a37fe380190d7c8823cce61c1de7bbcbaa51f956cc5c805f03df6814ffae17d5db1b82600301600b84600301604051610bca9190613b8e565b90815260405190819003602001812054610be49291613bc1565b60405180910390a1505050565b600e8181548110610c0157600080fd5b600091825260209091200154905081565b600f8181548110610c2257600080fd5b906000526020600020016000915090508054610c3d90613ae1565b80601f0160208091040260200160405190810160405280929190818152602001828054610c6990613ae1565b8015610cb65780601f10610c8b57610100808354040283529160200191610cb6565b820191906000526020600020905b815481529060010190602001808311610c9957829003601f168201915b505050505081565b606060006010546001600160401b03811115610cdc57610cdc6134a8565b604051908082528060200260200182016040528015610d05578160200160208202803683370190505b509050600060015b6010548111610e075760008181526008602052604090206007015460ff168015610dc45750848051906020012060086000838152602001908152602001600020600401604051610d5d9190613b8e565b60405180910390201480610dc4575060408051808201825260098152681c1c995cda59195b9d60ba1b602091820152600083815260089091528190209051600080516020613eee83398151915291610dba91600390910190613b8e565b6040518091039020145b15610df55780838381518110610ddc57610ddc613c55565b602090810291909101015281610df181613b9a565b9250505b80610dff81613b9a565b915050610d0d565b506000816001600160401b03811115610e2257610e226134a8565b604051908082528060200260200182016040528015610e4b578160200160208202803683370190505b50905060005b82811015610ea257838181518110610e6b57610e6b613c55565b6020026020010151828281518110610e8557610e85613c55565b602090810291909101015280610e9a81613b9a565b915050610e51565b50949350505050565b8151602081840181018051600a825292820191850191909120919052805482908110610ed657600080fd5b90600052602060002001600091509150508054610c3d90613ae1565b60608060608060606000306001600160a01b03166361806886886040518263ffffffff1660e01b8152600401610f28919061348e565b600060405180830381865afa158015610f45573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f6d9190810190613c6b565b8051909150806001600160401b03811115610f8a57610f8a6134a8565b604051908082528060200260200182016040528015610fb3578160200160208202803683370190505b509650806001600160401b03811115610fce57610fce6134a8565b60405190808252806020026020018201604052801561100157816020015b6060815260200190600190039081610fec5790505b509550806001600160401b0381111561101c5761101c6134a8565b60405190808252806020026020018201604052801561104f57816020015b606081526020019060019003908161103a5790505b509450806001600160401b0381111561106a5761106a6134a8565b60405190808252806020026020018201604052801561109d57816020015b60608152602001906001900390816110885790505b509350806001600160401b038111156110b8576110b86134a8565b6040519080825280602002602001820160405280156110e1578160200160208202803683370190505b50925060005b818110156113a757600083828151811061110357611103613c55565b602002602001015190508089838151811061112057611120613c55565b60200260200101818152505060086000828152602001908152602001600020600101805461114d90613ae1565b80601f016020809104026020016040519081016040528092919081815260200182805461117990613ae1565b80156111c65780601f1061119b576101008083540402835291602001916111c6565b820191906000526020600020905b8154815290600101906020018083116111a957829003601f168201915b50505050508883815181106111dd576111dd613c55565b602002602001018190525060086000828152602001908152602001600020600201805461120990613ae1565b80601f016020809104026020016040519081016040528092919081815260200182805461123590613ae1565b80156112825780601f1061125757610100808354040283529160200191611282565b820191906000526020600020905b81548152906001019060200180831161126557829003601f168201915b505050505087838151811061129957611299613c55565b60200260200101819052506008600082815260200190815260200160002060050180546112c590613ae1565b80601f01602080910402602001604051908101604052809291908181526020018280546112f190613ae1565b801561133e5780601f106113135761010080835404028352916020019161133e565b820191906000526020600020905b81548152906001019060200180831161132157829003601f168201915b505050505086838151811061135557611355613c55565b6020026020010181905250600860008281526020019081526020016000206006015485838151811061138957611389613c55565b6020908102919091010152508061139f81613b9a565b9150506110e7565b50505091939590929450565b600860205260009081526040902080546001820180549192916113d590613ae1565b80601f016020809104026020016040519081016040528092919081815260200182805461140190613ae1565b801561144e5780601f106114235761010080835404028352916020019161144e565b820191906000526020600020905b81548152906001019060200180831161143157829003601f168201915b50505050509080600201805461146390613ae1565b80601f016020809104026020016040519081016040528092919081815260200182805461148f90613ae1565b80156114dc5780601f106114b1576101008083540402835291602001916114dc565b820191906000526020600020905b8154815290600101906020018083116114bf57829003601f168201915b5050505050908060030180546114f190613ae1565b80601f016020809104026020016040519081016040528092919081815260200182805461151d90613ae1565b801561156a5780601f1061153f5761010080835404028352916020019161156a565b820191906000526020600020905b81548152906001019060200180831161154d57829003601f168201915b50505050509080600401805461157f90613ae1565b80601f01602080910402602001604051908101604052809291908181526020018280546115ab90613ae1565b80156115f85780601f106115cd576101008083540402835291602001916115f8565b820191906000526020600020905b8154815290600101906020018083116115db57829003601f168201915b50505050509080600501805461160d90613ae1565b80601f016020809104026020016040519081016040528092919081815260200182805461163990613ae1565b80156116865780601f1061165b57610100808354040283529160200191611686565b820191906000526020600020905b81548152906001019060200180831161166957829003601f168201915b50505050600683015460079093015491929160ff16905088565b6000600b826040516116b29190613d04565b9081526020016040518091039020549050919050565b6000546001600160a01b031633146116f25760405162461bcd60e51b815260040161071890613d20565b8284106117415760405162461bcd60e51b815260206004820152601b60248201527f496e76616c696420726567697374726174696f6e20706572696f6400000000006044820152606401610718565b81831061179c5760405162461bcd60e51b815260206004820152602360248201527f526567697374726174696f6e206d75737420656e64206265666f726520766f74604482015262696e6760e81b6064820152608401610718565b8082106117e35760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a59081d9bdd1a5b99c81c195c9a5bd9605a1b6044820152606401610718565b600193909355600291909155600355600455565b6000806001600160a01b03166006836040516118139190613d04565b908152604051908190036020019020546001600160a01b0316141592915050565b606060006010546001600160401b03811115611852576118526134a8565b60405190808252806020026020018201604052801561187b578160200160208202803683370190505b509050600060015b60105481116119205760008181526008602052604090206007015460ff1680156118dd57508480519060200120600860008381526020019081526020016000206003016040516118d39190613b8e565b6040518091039020145b1561190e57808383815181106118f5576118f5613c55565b60209081029190910101528161190a81613b9a565b9250505b8061191881613b9a565b915050611883565b506000816001600160401b0381111561193b5761193b6134a8565b604051908082528060200260200182016040528015611964578160200160208202803683370190505b50905060005b82811015610ea25783818151811061198457611984613c55565b602002602001015182828151811061199e5761199e613c55565b6020908102919091010152806119b381613b9a565b91505061196a565b6000546001600160a01b031633146119e55760405162461bcd60e51b815260040161071890613d20565b6000805461ffff60a01b19169055565b6060600f805480602002602001604051908101604052809291908181526020016000905b82821015611ac5578382906000526020600020018054611a3890613ae1565b80601f0160208091040260200160405190810160405280929190818152602001828054611a6490613ae1565b8015611ab15780601f10611a8657610100808354040283529160200191611ab1565b820191906000526020600020905b815481529060010190602001808311611a9457829003601f168201915b505050505081526020019060010190611a19565b50505050905090565b60008060606000600685604051611ae59190613d04565b908152604051908190036020019020546001600160a01b031690508015611c98576001600160a01b0381166000908152600560209081526040808320815160a081018352815460ff80821615158352610100909104161515938101939093526001810180549192840191611b5890613ae1565b80601f0160208091040260200160405190810160405280929190818152602001828054611b8490613ae1565b8015611bd15780601f10611ba657610100808354040283529160200191611bd1565b820191906000526020600020905b815481529060010190602001808311611bb457829003601f168201915b50505050508152602001600282018054611bea90613ae1565b80601f0160208091040260200160405190810160405280929190818152602001828054611c1690613ae1565b8015611c635780601f10611c3857610100808354040283529160200191611c63565b820191906000526020600020905b815481529060010190602001808311611c4657829003601f168201915b5050509183525050600391909101546001600160a01b031660209091015280516040909101519295509350909150611cb09050565b50506040805160208101909152600080825292508291505b9193909250565b6000546001600160a01b03163314611ce15760405162461bcd60e51b815260040161071890613d20565b6001600160a01b038116611d2f5760405162461bcd60e51b8152602060048201526015602482015274496e76616c69642061646d696e206164647265737360581b6044820152606401610718565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6060806060806060600080306001600160a01b03166361806886896040518263ffffffff1660e01b8152600401611d88919061348e565b600060405180830381865afa158015611da5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611dcd9190810190613c6b565b8051909150806001600160401b03811115611dea57611dea6134a8565b604051908082528060200260200182016040528015611e13578160200160208202803683370190505b509750806001600160401b03811115611e2e57611e2e6134a8565b604051908082528060200260200182016040528015611e6157816020015b6060815260200190600190039081611e4c5790505b509650806001600160401b03811115611e7c57611e7c6134a8565b604051908082528060200260200182016040528015611eaf57816020015b6060815260200190600190039081611e9a5790505b509550806001600160401b03811115611eca57611eca6134a8565b604051908082528060200260200182016040528015611efd57816020015b6060815260200190600190039081611ee85790505b509450806001600160401b03811115611f1857611f186134a8565b604051908082528060200260200182016040528015611f41578160200160208202803683370190505b50935060005b81811015612207576000838281518110611f6357611f63613c55565b60200260200101519050808a8381518110611f8057611f80613c55565b602002602001018181525050600860008281526020019081526020016000206001018054611fad90613ae1565b80601f0160208091040260200160405190810160405280929190818152602001828054611fd990613ae1565b80156120265780601f10611ffb57610100808354040283529160200191612026565b820191906000526020600020905b81548152906001019060200180831161200957829003601f168201915b505050505089838151811061203d5761203d613c55565b602002602001018190525060086000828152602001908152602001600020600201805461206990613ae1565b80601f016020809104026020016040519081016040528092919081815260200182805461209590613ae1565b80156120e25780601f106120b7576101008083540402835291602001916120e2565b820191906000526020600020905b8154815290600101906020018083116120c557829003601f168201915b50505050508883815181106120f9576120f9613c55565b602002602001018190525060086000828152602001908152602001600020600501805461212590613ae1565b80601f016020809104026020016040519081016040528092919081815260200182805461215190613ae1565b801561219e5780601f106121735761010080835404028352916020019161219e565b820191906000526020600020905b81548152906001019060200180831161218157829003601f168201915b50505050508783815181106121b5576121b5613c55565b602002602001018190525060086000828152602001908152602001600020600601548683815181106121e9576121e9613c55565b602090810291909101015250806121ff81613b9a565b915050611f47565b50600b896040516122189190613d04565b9081526020016040518091039020549250505091939550919395565b600054600160a81b900460ff1661228d5760405162461bcd60e51b815260206004820152601a60248201527f526567697374726174696f6e206973206e6f74206163746976650000000000006044820152606401610718565b60015442101580156122a157506002544211155b6122ed5760405162461bcd60e51b815260206004820152601b60248201527f4f75747369646520726567697374726174696f6e20706572696f6400000000006044820152606401610718565b3360009081526005602052604090205460ff161561234d5760405162461bcd60e51b815260206004820152601860248201527f566f74657220616c7265616479207265676973746572656400000000000000006044820152606401610718565b3360009081526007602052604090205460ff16156123a45760405162461bcd60e51b81526020600482015260146024820152731059191c995cdcc8185b1c9958591e481d5cd95960621b6044820152606401610718565b60008251116123f55760405162461bcd60e51b815260206004820152601b60248201527f4e6174696f6e616c2049442063616e6e6f7420626520656d70747900000000006044820152606401610718565b600081511161243f5760405162461bcd60e51b8152602060048201526016602482015275526567696f6e2063616e6e6f7420626520656d70747960501b6044820152606401610718565b612448816133b4565b6124855760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b2103932b3b4b7b760911b6044820152606401610718565b60006001600160a01b03166006836040516124a09190613d04565b908152604051908190036020019020546001600160a01b0316146125065760405162461bcd60e51b815260206004820152601e60248201527f4e6174696f6e616c20494420616c7265616479207265676973746572656400006044820152606401610718565b6040805160a081018252600180825260006020808401828152848601878152606086018990523360808701819052845260059092529490912083518154955161ffff1990961690151561ff001916176101009515159590950294909417845551919291908201906125779082613db1565b506060820151600282019061258c9082613db1565b5060809190910151600390910180546001600160a01b0319166001600160a01b0390921691909117905560405133906006906125c9908590613d04565b9081526040805191829003602090810190922080546001600160a01b03949094166001600160a01b03199485161790553360008181526007909352908220805460ff19166001908117909155600d8054918201815583527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb501805490931617909155601180549161265983613b9a565b9190505550336001600160a01b03167f96ac7a421360a2bd773d747b2f64b40a916821c4906dbfdebf787c292e741f7d8383604051612699929190613e70565b60405180910390a25050565b6000546001600160a01b031633146126cf5760405162461bcd60e51b815260040161071890613d20565b60008551116127175760405162461bcd60e51b81526020600482015260146024820152734e616d652063616e6e6f7420626520656d70747960601b6044820152606401610718565b60008451116127605760405162461bcd60e51b815260206004820152601560248201527450617274792063616e6e6f7420626520656d70747960581b6044820152606401610718565b6040805180820190915260098152681c1c995cda59195b9d60ba1b602091820152835190840120600080516020613eee83398151915214806127e5575060408051808201909152600781526639b2b730ba37b960c91b6020918201528351908401207f81c805ede0e9aab5a942d8587dcd0dc28ba17c7d9bf90faa61c2beb9f087b09f145b80612834575060408051808201909152600881526733b7bb32b93737b960c11b6020918201528351908401207f1e46cebd6689d8c64011118478db0c61a89aa2646c860df401de476fbf378983145b6128735760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b2103837b9b4ba34b7b760811b6044820152606401610718565b6040805180820190915260098152681c1c995cda59195b9d60ba1b6020918201528351908401207ff9535f3ad5cb1967f004db0548bc0a3c1255729f32a0180a66a788542ebe1a62016128d757604051806020016040528060008152509150612940565b60008251116129405760405162461bcd60e51b815260206004820152602f60248201527f526567696f6e20726571756972656420666f72206e6f6e2d707265736964656e60448201526e7469616c2063616e6469646174657360881b6064820152608401610718565b6010805490600061295083613b9a565b909155505060408051610100810182526010548082526020808301898152838501899052606084018890526080840187905260a08401869052600060c08501819052600160e086018190529381526008909252939020825181559251919291908201906129bd9082613db1565b50604082015160028201906129d29082613db1565b50606082015160038201906129e79082613db1565b50608082015160048201906129fc9082613db1565b5060a08201516005820190612a119082613db1565b5060c0820151600682015560e0909101516007909101805460ff1916911515919091179055601054600e80546001810182556000919091527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd018190556040517f1908f3f8bf9e04cbee388cdea6025f92e954127dec768c7e092afb158071f0d090612aa4908890879087908790613e95565b60405180910390a25050505050565b6000546001600160a01b03163314612add5760405162461bcd60e51b815260040161071890613d20565b600081118015612aef57506010548111155b612b325760405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a590818d85b991a59185d1948125160621b6044820152606401610718565b6000908152600860205260409020600701805460ff19169055565b6001600160a01b0381166000908152600560209081526040808320815160a081018352815460ff808216151583526101009091041615159381019390935260018101805485946060948594859488949192840191612baa90613ae1565b80601f0160208091040260200160405190810160405280929190818152602001828054612bd690613ae1565b8015612c235780601f10612bf857610100808354040283529160200191612c23565b820191906000526020600020905b815481529060010190602001808311612c0657829003601f168201915b50505050508152602001600282018054612c3c90613ae1565b80601f0160208091040260200160405190810160405280929190818152602001828054612c6890613ae1565b8015612cb55780601f10612c8a57610100808354040283529160200191612cb5565b820191906000526020600020905b815481529060010190602001808311612c9857829003601f168201915b50505091835250506003918201546001600160a01b0316602091820152604080518381526080810190915292935082016060803683375050506001600160a01b03881660009081526009602081905260408083208151681c1c995cda59195b9d60ba1b8152928301525190819003602901902054825192945060ff1691849190612d4157612d41613c55565b9115156020928302919091018201526001600160a01b0388166000908152600990915260409081902090516639b2b730ba37b960c91b815260070190815260405190819003602001902054825160ff9091169083906001908110612da757612da7613c55565b9115156020928302919091018201526001600160a01b0388166000908152600990915260409081902090516733b7bb32b93737b960c11b815260080190815260405190819003602001902054825160ff9091169083906002908110612e0e57612e0e613c55565b9115156020928302919091018201528151908201516040830151606090930151919990985091965094509092509050565b6005602052600090815260409020805460018201805460ff8084169461010090940416929190612e6e90613ae1565b80601f0160208091040260200160405190810160405280929190818152602001828054612e9a90613ae1565b8015612ee75780601f10612ebc57610100808354040283529160200191612ee7565b820191906000526020600020905b815481529060010190602001808311612eca57829003601f168201915b505050505090806002018054612efc90613ae1565b80601f0160208091040260200160405190810160405280929190818152602001828054612f2890613ae1565b8015612f755780601f10612f4a57610100808354040283529160200191612f75565b820191906000526020600020905b815481529060010190602001808311612f5857829003601f168201915b505050600390930154919250506001600160a01b031685565b6000546001600160a01b03163314612fb85760405162461bcd60e51b815260040161071890613d20565b6000805460ff600160a01b808304821615810260ff60a01b1990931692909217928390556040517f793ad8eb8c2b97317dead028ac9839d1020670c14e6c520939e8e3584e1a6f889361303393900490911690604080825260069082015265766f74696e6760d01b6060820152901515602082015260800190565b60405180910390a1565b6000600c8360405161304f9190613d04565b90815260200160405180910390208260405161306b9190613d04565b908152602001604051809103902054905092915050565b6000546001600160a01b031633146130ac5760405162461bcd60e51b815260040161071890613d20565b600f80546001810182556000919091527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802016130e88282613db1565b50600a816040516130f99190613d04565b908152604080519182900360209081018320805460018101825560009182529082902084840190935260098452681c1c995cda59195b9d60ba1b9184019190915201906131469082613db1565b50600a816040516131579190613d04565b9081526040805191829003602090810183208054600181018255600091825290829020848401909352600784526639b2b730ba37b960c91b9184019190915201906131a29082613db1565b50600a816040516131b39190613d04565b9081526040805191829003602090810183208054600181018255600091825290829020848401909352600884526733b7bb32b93737b960c11b9184019190915201906131ff9082613db1565b5050565b6000546001600160a01b0316331461322d5760405162461bcd60e51b815260040161071890613d20565b6000805460ff600160a81b808304821615810260ff60a81b1990931692909217928390556040517f793ad8eb8c2b97317dead028ac9839d1020670c14e6c520939e8e3584e1a6f8893613033939004909116906040808252600c908201526b3932b3b4b9ba3930ba34b7b760a11b6060820152901515602082015260800190565b600d81815481106132be57600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b038116600090815260096020526040808220905161330c90681c1c995cda59195b9d60ba1b815260090190565b9081526040519081900360200190205460ff16801561336657506001600160a01b0382166000908152600960205260409081902090516639b2b730ba37b960c91b81526007019081526040519081900360200190205460ff165b80156133ae57506001600160a01b0382166000908152600960205260409081902090516733b7bb32b93737b960c11b81526008019081526040519081900360200190205460ff165b92915050565b6000805b600f5481101561341c578280519060200120600f82815481106133dd576133dd613c55565b906000526020600020016040516133f49190613b8e565b60405180910390200361340a5750600192915050565b8061341481613b9a565b9150506133b8565b50600092915050565b60006020828403121561343757600080fd5b5035919050565b60005b83811015613459578181015183820152602001613441565b50506000910152565b6000815180845261347a81602086016020860161343e565b601f01601f19169290920160200192915050565b6020815260006134a16020830184613462565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156134e6576134e66134a8565b604052919050565b600082601f8301126134ff57600080fd5b81356001600160401b03811115613518576135186134a8565b61352b601f8201601f19166020016134be565b81815284602083860101111561354057600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561356f57600080fd5b81356001600160401b0381111561358557600080fd5b613591848285016134ee565b949350505050565b600081518084526020808501945080840160005b838110156135c9578151875295820195908201906001016135ad565b509495945050505050565b6020815260006134a16020830184613599565b600080604083850312156135fa57600080fd5b82356001600160401b0381111561361057600080fd5b61361c858286016134ee565b95602094909401359450505050565b600082825180855260208086019550808260051b84010181860160005b8481101561367657601f19868403018952613664838351613462565b98840198925090830190600101613648565b5090979650505050505050565b60a08152600061369660a0830188613599565b82810360208401526136a8818861362b565b905082810360408401526136bc818761362b565b905082810360608401526136d0818661362b565b905082810360808401526136e48185613599565b98975050505050505050565b60006101008a835280602084015261370a8184018b613462565b9050828103604084015261371e818a613462565b905082810360608401526137328189613462565b905082810360808401526137468188613462565b905082810360a084015261375a8187613462565b60c0840195909552505090151560e0909101529695505050505050565b6000806040838503121561378a57600080fd5b82356001600160401b03808211156137a157600080fd5b6137ad868387016134ee565b935060208501359150808211156137c357600080fd5b506137d0858286016134ee565b9150509250929050565b600080600080608085870312156137f057600080fd5b5050823594602084013594506040840135936060013592509050565b6020815260006134a1602083018461362b565b6001600160a01b0384168152821515602082015260606040820181905260009061384b90830184613462565b95945050505050565b80356001600160a01b038116811461386b57600080fd5b919050565b60006020828403121561388257600080fd5b6134a182613854565b60c08152600061389e60c0830189613599565b82810360208401526138b0818961362b565b905082810360408401526138c4818861362b565b905082810360608401526138d8818761362b565b905082810360808401526138ec8186613599565b9150508260a0830152979650505050505050565b6000806040838503121561391357600080fd5b61391c83613854565b915060208301356001600160401b0381111561393757600080fd5b6137d0858286016134ee565b600080600080600060a0868803121561395b57600080fd5b85356001600160401b038082111561397257600080fd5b61397e89838a016134ee565b9650602088013591508082111561399457600080fd5b6139a089838a016134ee565b955060408801359150808211156139b657600080fd5b6139c289838a016134ee565b945060608801359150808211156139d857600080fd5b6139e489838a016134ee565b935060808801359150808211156139fa57600080fd5b50613a07888289016134ee565b9150509295509295909350565b8515158152600060208615158184015260a06040840152613a3860a0840187613462565b8381036060850152613a4a8187613462565b8481036080860152855180825283870192509083019060005b81811015613a81578351151583529284019291840191600101613a63565b50909a9950505050505050505050565b8515158152841515602082015260a060408201526000613ab460a0830186613462565b8281036060840152613ac68186613462565b91505060018060a01b03831660808301529695505050505050565b600181811c90821680613af557607f821691505b602082108103613b1557634e487b7160e01b600052602260045260246000fd5b50919050565b60008154613b2881613ae1565b60018281168015613b405760018114613b5557613b84565b60ff1984168752821515830287019450613b84565b8560005260208060002060005b85811015613b7b5781548a820152908401908201613b62565b50505082870194505b5050505092915050565b60006134a18284613b1b565b600060018201613bba57634e487b7160e01b600052601160045260246000fd5b5060010190565b604081526000808454613bd381613ae1565b8060408601526060600180841660008114613bf55760018114613c0f57613c40565b60ff1985168884015283151560051b880183019550613c40565b8960005260208060002060005b86811015613c375781548b8201870152908401908201613c1c565b8a018501975050505b50505050506020929092019290925292915050565b634e487b7160e01b600052603260045260246000fd5b60006020808385031215613c7e57600080fd5b82516001600160401b0380821115613c9557600080fd5b818501915085601f830112613ca957600080fd5b815181811115613cbb57613cbb6134a8565b8060051b9150613ccc8483016134be565b8181529183018401918481019088841115613ce657600080fd5b938501935b838510156136e457845182529385019390850190613ceb565b60008251613d1681846020870161343e565b9190910192915050565b60208082526022908201527f4f6e6c792061646d696e2063616e20706572666f726d2074686973206163746960408201526137b760f11b606082015260800190565b601f821115613dac57600081815260208120601f850160051c81016020861015613d895750805b601f850160051c820191505b81811015613da857828155600101613d95565b5050505b505050565b81516001600160401b03811115613dca57613dca6134a8565b613dde81613dd88454613ae1565b84613d62565b602080601f831160018114613e135760008415613dfb5750858301515b600019600386901b1c1916600185901b178555613da8565b600085815260208120601f198616915b82811015613e4257888601518255948401946001909101908401613e23565b5085821015613e605787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b604081526000613e836040830185613462565b828103602084015261384b8185613462565b608081526000613ea86080830187613462565b8281036020840152613eba8187613462565b90508281036040840152613ece8186613462565b90508281036060840152613ee28185613462565b97965050505050505056fe06aca0c52a34e6980ffb24fab743f5c3edaa8d60cd5fe7f5995877abd141e59ea264697066735822122049f4fd7ea5ac36b02f83b46a48a83595d08fc800c26ab79240a54232a49db75564736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061025e5760003560e01c8063793cf21811610146578063a9a981a3116100c3578063b4e9a8c111610087578063b4e9a8c114610664578063b5a9be8514610677578063bfbda98c1461068b578063d23d08a71461069e578063dd0e2373146106a6578063f851a440146106b957600080fd5b8063a9a981a3146105db578063aa216bef146105e4578063aae3bd4714610630578063b1b9572414610638578063b4062a311461065b57600080fd5b8063945ddfb91161010a578063945ddfb91461054257806397341d59146105555780639e4752e3146105685780639ed1f25514610593578063a3ec138d146105b757600080fd5b8063793cf218146104ba57806381531a2c146104c257806385a38635146104e75780638a4c8847146104f05780638ad1782b1461050357600080fd5b8063375163ea116101df57806350ecf31f116101a357806350ecf31f14610442578063618068861461045557806363a599a41461046857806366c76ad9146104705780636ea0772b1461048557806375829def146104a757600080fd5b8063375163ea146103a75780633de3b5b2146103ef578063405ebe5914610402578063408e27271461041557806342169e481461043957600080fd5b806313446a751161022657806313446a751461032057806320a1a31c14610329578063263088be146103495780632ff20f011461035c5780633477ee2e1461038057600080fd5b80630121b93f146102635780630301613014610278578063101158af1461029e578063122902a6146102a7578063132abfb614610300575b600080fd5b610276610271366004613425565b6106cc565b005b61028b610286366004613425565b610bf1565b6040519081526020015b60405180910390f35b61028b60035481565b6102d160005460015460025460035460045460ff600160a81b8604811695600160a01b9004169495565b6040805196151587529415156020870152938501929092526060840152608083015260a082015260c001610295565b61031361030e366004613425565b610c12565b604051610295919061348e565b61028b60025481565b61033c61033736600461355d565b610cbe565b60405161029591906135d4565b6103136103573660046135e7565b610eab565b61036f61036a36600461355d565b610ef2565b604051610295959493929190613683565b61039361038e366004613425565b6113b3565b6040516102959897969594939291906136f0565b61028b6103b5366004613777565b8151602081840181018051600c82529282019482019490942091909352815180830184018051928152908401929093019190912091525481565b61028b6103fd36600461355d565b6116a0565b6102766104103660046137da565b6116c8565b60005461042990600160a01b900460ff1681565b6040519015158152602001610295565b61028b60115481565b61042961045036600461355d565b6117f7565b61033c61046336600461355d565b611834565b6102766119bb565b6104786119f5565b604051610295919061380c565b61049861049336600461355d565b611ace565b6040516102959392919061381f565b6102766104b5366004613870565b611cb7565b60115461028b565b6104d56104d036600461355d565b611d51565b6040516102959695949392919061388b565b61028b60045481565b6102766104fe366004613777565b612234565b610429610511366004613900565b6009602090815260009283526040909220815180830184018051928152908401929093019190912091525460ff1681565b610276610550366004613943565b6126a5565b610276610563366004613425565b612ab3565b61028b61057636600461355d565b8051602081830181018051600b8252928201919093012091525481565b6105a66105a1366004613870565b612b4d565b604051610295959493929190613a14565b6105ca6105c5366004613870565b612e3f565b604051610295959493929190613a91565b61028b60105481565b6106186105f236600461355d565b80516020818301810180516006825292820191909301209152546001600160a01b031681565b6040516001600160a01b039091168152602001610295565b610276612f8e565b610429610646366004613870565b60076020526000908152604090205460ff1681565b61028b60015481565b61028b610672366004613777565b61303d565b60005461042990600160a81b900460ff1681565b61027661069936600461355d565b613082565b610276613203565b6106186106b4366004613425565b6132ae565b600054610618906001600160a01b031681565b600054600160a01b900460ff166107215760405162461bcd60e51b8152602060048201526014602482015273566f74696e67206973206e6f742061637469766560601b60448201526064015b60405180910390fd5b600354421015801561073557506004544211155b6107795760405162461bcd60e51b815260206004820152601560248201527413dd5d1cda5919481d9bdd1a5b99c81c195c9a5bd9605a1b6044820152606401610718565b3360009081526005602052604090205460ff166107cf5760405162461bcd60e51b8152602060048201526014602482015273159bdd195c881b9bdd081c9959da5cdd195c995960621b6044820152606401610718565b6000811180156107e157506010548111155b6108245760405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a590818d85b991a59185d1948125160621b6044820152606401610718565b60008181526008602052604090206007015460ff166108855760405162461bcd60e51b815260206004820152601760248201527f43616e646964617465206973206e6f74206163746976650000000000000000006044820152606401610718565b60008181526008602090815260408083203384526005835281842060099093529281902090516108b9906003850190613b8e565b9081526040519081900360200190205460ff16156109195760405162461bcd60e51b815260206004820152601f60248201527f416c726561647920766f74656420666f72207468697320706f736974696f6e006044820152606401610718565b60408051808201825260098152681c1c995cda59195b9d60ba1b60209091015251600080516020613eee83398151915290610958906003850190613b8e565b6040518091039020146109fa57806001016040516109769190613b8e565b60405180910390208260040160405161098f9190613b8e565b6040518091039020146109fa5760405162461bcd60e51b815260206004820152602d60248201527f43616e6e6f7420766f746520666f722063616e646964617465206f757473696460448201526c32903cb7bab9103932b3b4b7b760991b6064820152608401610718565b600682018054906000610a0c83613b9a565b90915550503360009081526009602052604090819020905160019190610a36906003860190613b8e565b908152604051908190036020018120805492151560ff1990931692909217909155600b90610a68906003850190613b8e565b9081526040519081900360200190208054906000610a8583613b9a565b909155505060408051808201825260098152681c1c995cda59195b9d60ba1b60209091015251600080516020613eee83398151915290610ac9906003850190613b8e565b604051809103902014610b2b57600c82600301604051610ae99190613b8e565b908152602001604051809103902081600101604051610b089190613b8e565b9081526040519081900360200190208054906000610b2583613b9a565b91905055505b610b34336132d8565b15610b4757805461ff0019166101001781555b82336001600160a01b03167f98e89bf3391103a9810884f4b4d01aa7ea00d566f73696c0e35c6361cb4e6737846003018560060154604051610b8a929190613bc1565b60405180910390a37fe380190d7c8823cce61c1de7bbcbaa51f956cc5c805f03df6814ffae17d5db1b82600301600b84600301604051610bca9190613b8e565b90815260405190819003602001812054610be49291613bc1565b60405180910390a1505050565b600e8181548110610c0157600080fd5b600091825260209091200154905081565b600f8181548110610c2257600080fd5b906000526020600020016000915090508054610c3d90613ae1565b80601f0160208091040260200160405190810160405280929190818152602001828054610c6990613ae1565b8015610cb65780601f10610c8b57610100808354040283529160200191610cb6565b820191906000526020600020905b815481529060010190602001808311610c9957829003601f168201915b505050505081565b606060006010546001600160401b03811115610cdc57610cdc6134a8565b604051908082528060200260200182016040528015610d05578160200160208202803683370190505b509050600060015b6010548111610e075760008181526008602052604090206007015460ff168015610dc45750848051906020012060086000838152602001908152602001600020600401604051610d5d9190613b8e565b60405180910390201480610dc4575060408051808201825260098152681c1c995cda59195b9d60ba1b602091820152600083815260089091528190209051600080516020613eee83398151915291610dba91600390910190613b8e565b6040518091039020145b15610df55780838381518110610ddc57610ddc613c55565b602090810291909101015281610df181613b9a565b9250505b80610dff81613b9a565b915050610d0d565b506000816001600160401b03811115610e2257610e226134a8565b604051908082528060200260200182016040528015610e4b578160200160208202803683370190505b50905060005b82811015610ea257838181518110610e6b57610e6b613c55565b6020026020010151828281518110610e8557610e85613c55565b602090810291909101015280610e9a81613b9a565b915050610e51565b50949350505050565b8151602081840181018051600a825292820191850191909120919052805482908110610ed657600080fd5b90600052602060002001600091509150508054610c3d90613ae1565b60608060608060606000306001600160a01b03166361806886886040518263ffffffff1660e01b8152600401610f28919061348e565b600060405180830381865afa158015610f45573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f6d9190810190613c6b565b8051909150806001600160401b03811115610f8a57610f8a6134a8565b604051908082528060200260200182016040528015610fb3578160200160208202803683370190505b509650806001600160401b03811115610fce57610fce6134a8565b60405190808252806020026020018201604052801561100157816020015b6060815260200190600190039081610fec5790505b509550806001600160401b0381111561101c5761101c6134a8565b60405190808252806020026020018201604052801561104f57816020015b606081526020019060019003908161103a5790505b509450806001600160401b0381111561106a5761106a6134a8565b60405190808252806020026020018201604052801561109d57816020015b60608152602001906001900390816110885790505b509350806001600160401b038111156110b8576110b86134a8565b6040519080825280602002602001820160405280156110e1578160200160208202803683370190505b50925060005b818110156113a757600083828151811061110357611103613c55565b602002602001015190508089838151811061112057611120613c55565b60200260200101818152505060086000828152602001908152602001600020600101805461114d90613ae1565b80601f016020809104026020016040519081016040528092919081815260200182805461117990613ae1565b80156111c65780601f1061119b576101008083540402835291602001916111c6565b820191906000526020600020905b8154815290600101906020018083116111a957829003601f168201915b50505050508883815181106111dd576111dd613c55565b602002602001018190525060086000828152602001908152602001600020600201805461120990613ae1565b80601f016020809104026020016040519081016040528092919081815260200182805461123590613ae1565b80156112825780601f1061125757610100808354040283529160200191611282565b820191906000526020600020905b81548152906001019060200180831161126557829003601f168201915b505050505087838151811061129957611299613c55565b60200260200101819052506008600082815260200190815260200160002060050180546112c590613ae1565b80601f01602080910402602001604051908101604052809291908181526020018280546112f190613ae1565b801561133e5780601f106113135761010080835404028352916020019161133e565b820191906000526020600020905b81548152906001019060200180831161132157829003601f168201915b505050505086838151811061135557611355613c55565b6020026020010181905250600860008281526020019081526020016000206006015485838151811061138957611389613c55565b6020908102919091010152508061139f81613b9a565b9150506110e7565b50505091939590929450565b600860205260009081526040902080546001820180549192916113d590613ae1565b80601f016020809104026020016040519081016040528092919081815260200182805461140190613ae1565b801561144e5780601f106114235761010080835404028352916020019161144e565b820191906000526020600020905b81548152906001019060200180831161143157829003601f168201915b50505050509080600201805461146390613ae1565b80601f016020809104026020016040519081016040528092919081815260200182805461148f90613ae1565b80156114dc5780601f106114b1576101008083540402835291602001916114dc565b820191906000526020600020905b8154815290600101906020018083116114bf57829003601f168201915b5050505050908060030180546114f190613ae1565b80601f016020809104026020016040519081016040528092919081815260200182805461151d90613ae1565b801561156a5780601f1061153f5761010080835404028352916020019161156a565b820191906000526020600020905b81548152906001019060200180831161154d57829003601f168201915b50505050509080600401805461157f90613ae1565b80601f01602080910402602001604051908101604052809291908181526020018280546115ab90613ae1565b80156115f85780601f106115cd576101008083540402835291602001916115f8565b820191906000526020600020905b8154815290600101906020018083116115db57829003601f168201915b50505050509080600501805461160d90613ae1565b80601f016020809104026020016040519081016040528092919081815260200182805461163990613ae1565b80156116865780601f1061165b57610100808354040283529160200191611686565b820191906000526020600020905b81548152906001019060200180831161166957829003601f168201915b50505050600683015460079093015491929160ff16905088565b6000600b826040516116b29190613d04565b9081526020016040518091039020549050919050565b6000546001600160a01b031633146116f25760405162461bcd60e51b815260040161071890613d20565b8284106117415760405162461bcd60e51b815260206004820152601b60248201527f496e76616c696420726567697374726174696f6e20706572696f6400000000006044820152606401610718565b81831061179c5760405162461bcd60e51b815260206004820152602360248201527f526567697374726174696f6e206d75737420656e64206265666f726520766f74604482015262696e6760e81b6064820152608401610718565b8082106117e35760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a59081d9bdd1a5b99c81c195c9a5bd9605a1b6044820152606401610718565b600193909355600291909155600355600455565b6000806001600160a01b03166006836040516118139190613d04565b908152604051908190036020019020546001600160a01b0316141592915050565b606060006010546001600160401b03811115611852576118526134a8565b60405190808252806020026020018201604052801561187b578160200160208202803683370190505b509050600060015b60105481116119205760008181526008602052604090206007015460ff1680156118dd57508480519060200120600860008381526020019081526020016000206003016040516118d39190613b8e565b6040518091039020145b1561190e57808383815181106118f5576118f5613c55565b60209081029190910101528161190a81613b9a565b9250505b8061191881613b9a565b915050611883565b506000816001600160401b0381111561193b5761193b6134a8565b604051908082528060200260200182016040528015611964578160200160208202803683370190505b50905060005b82811015610ea25783818151811061198457611984613c55565b602002602001015182828151811061199e5761199e613c55565b6020908102919091010152806119b381613b9a565b91505061196a565b6000546001600160a01b031633146119e55760405162461bcd60e51b815260040161071890613d20565b6000805461ffff60a01b19169055565b6060600f805480602002602001604051908101604052809291908181526020016000905b82821015611ac5578382906000526020600020018054611a3890613ae1565b80601f0160208091040260200160405190810160405280929190818152602001828054611a6490613ae1565b8015611ab15780601f10611a8657610100808354040283529160200191611ab1565b820191906000526020600020905b815481529060010190602001808311611a9457829003601f168201915b505050505081526020019060010190611a19565b50505050905090565b60008060606000600685604051611ae59190613d04565b908152604051908190036020019020546001600160a01b031690508015611c98576001600160a01b0381166000908152600560209081526040808320815160a081018352815460ff80821615158352610100909104161515938101939093526001810180549192840191611b5890613ae1565b80601f0160208091040260200160405190810160405280929190818152602001828054611b8490613ae1565b8015611bd15780601f10611ba657610100808354040283529160200191611bd1565b820191906000526020600020905b815481529060010190602001808311611bb457829003601f168201915b50505050508152602001600282018054611bea90613ae1565b80601f0160208091040260200160405190810160405280929190818152602001828054611c1690613ae1565b8015611c635780601f10611c3857610100808354040283529160200191611c63565b820191906000526020600020905b815481529060010190602001808311611c4657829003601f168201915b5050509183525050600391909101546001600160a01b031660209091015280516040909101519295509350909150611cb09050565b50506040805160208101909152600080825292508291505b9193909250565b6000546001600160a01b03163314611ce15760405162461bcd60e51b815260040161071890613d20565b6001600160a01b038116611d2f5760405162461bcd60e51b8152602060048201526015602482015274496e76616c69642061646d696e206164647265737360581b6044820152606401610718565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6060806060806060600080306001600160a01b03166361806886896040518263ffffffff1660e01b8152600401611d88919061348e565b600060405180830381865afa158015611da5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611dcd9190810190613c6b565b8051909150806001600160401b03811115611dea57611dea6134a8565b604051908082528060200260200182016040528015611e13578160200160208202803683370190505b509750806001600160401b03811115611e2e57611e2e6134a8565b604051908082528060200260200182016040528015611e6157816020015b6060815260200190600190039081611e4c5790505b509650806001600160401b03811115611e7c57611e7c6134a8565b604051908082528060200260200182016040528015611eaf57816020015b6060815260200190600190039081611e9a5790505b509550806001600160401b03811115611eca57611eca6134a8565b604051908082528060200260200182016040528015611efd57816020015b6060815260200190600190039081611ee85790505b509450806001600160401b03811115611f1857611f186134a8565b604051908082528060200260200182016040528015611f41578160200160208202803683370190505b50935060005b81811015612207576000838281518110611f6357611f63613c55565b60200260200101519050808a8381518110611f8057611f80613c55565b602002602001018181525050600860008281526020019081526020016000206001018054611fad90613ae1565b80601f0160208091040260200160405190810160405280929190818152602001828054611fd990613ae1565b80156120265780601f10611ffb57610100808354040283529160200191612026565b820191906000526020600020905b81548152906001019060200180831161200957829003601f168201915b505050505089838151811061203d5761203d613c55565b602002602001018190525060086000828152602001908152602001600020600201805461206990613ae1565b80601f016020809104026020016040519081016040528092919081815260200182805461209590613ae1565b80156120e25780601f106120b7576101008083540402835291602001916120e2565b820191906000526020600020905b8154815290600101906020018083116120c557829003601f168201915b50505050508883815181106120f9576120f9613c55565b602002602001018190525060086000828152602001908152602001600020600501805461212590613ae1565b80601f016020809104026020016040519081016040528092919081815260200182805461215190613ae1565b801561219e5780601f106121735761010080835404028352916020019161219e565b820191906000526020600020905b81548152906001019060200180831161218157829003601f168201915b50505050508783815181106121b5576121b5613c55565b602002602001018190525060086000828152602001908152602001600020600601548683815181106121e9576121e9613c55565b602090810291909101015250806121ff81613b9a565b915050611f47565b50600b896040516122189190613d04565b9081526020016040518091039020549250505091939550919395565b600054600160a81b900460ff1661228d5760405162461bcd60e51b815260206004820152601a60248201527f526567697374726174696f6e206973206e6f74206163746976650000000000006044820152606401610718565b60015442101580156122a157506002544211155b6122ed5760405162461bcd60e51b815260206004820152601b60248201527f4f75747369646520726567697374726174696f6e20706572696f6400000000006044820152606401610718565b3360009081526005602052604090205460ff161561234d5760405162461bcd60e51b815260206004820152601860248201527f566f74657220616c7265616479207265676973746572656400000000000000006044820152606401610718565b3360009081526007602052604090205460ff16156123a45760405162461bcd60e51b81526020600482015260146024820152731059191c995cdcc8185b1c9958591e481d5cd95960621b6044820152606401610718565b60008251116123f55760405162461bcd60e51b815260206004820152601b60248201527f4e6174696f6e616c2049442063616e6e6f7420626520656d70747900000000006044820152606401610718565b600081511161243f5760405162461bcd60e51b8152602060048201526016602482015275526567696f6e2063616e6e6f7420626520656d70747960501b6044820152606401610718565b612448816133b4565b6124855760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b2103932b3b4b7b760911b6044820152606401610718565b60006001600160a01b03166006836040516124a09190613d04565b908152604051908190036020019020546001600160a01b0316146125065760405162461bcd60e51b815260206004820152601e60248201527f4e6174696f6e616c20494420616c7265616479207265676973746572656400006044820152606401610718565b6040805160a081018252600180825260006020808401828152848601878152606086018990523360808701819052845260059092529490912083518154955161ffff1990961690151561ff001916176101009515159590950294909417845551919291908201906125779082613db1565b506060820151600282019061258c9082613db1565b5060809190910151600390910180546001600160a01b0319166001600160a01b0390921691909117905560405133906006906125c9908590613d04565b9081526040805191829003602090810190922080546001600160a01b03949094166001600160a01b03199485161790553360008181526007909352908220805460ff19166001908117909155600d8054918201815583527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb501805490931617909155601180549161265983613b9a565b9190505550336001600160a01b03167f96ac7a421360a2bd773d747b2f64b40a916821c4906dbfdebf787c292e741f7d8383604051612699929190613e70565b60405180910390a25050565b6000546001600160a01b031633146126cf5760405162461bcd60e51b815260040161071890613d20565b60008551116127175760405162461bcd60e51b81526020600482015260146024820152734e616d652063616e6e6f7420626520656d70747960601b6044820152606401610718565b60008451116127605760405162461bcd60e51b815260206004820152601560248201527450617274792063616e6e6f7420626520656d70747960581b6044820152606401610718565b6040805180820190915260098152681c1c995cda59195b9d60ba1b602091820152835190840120600080516020613eee83398151915214806127e5575060408051808201909152600781526639b2b730ba37b960c91b6020918201528351908401207f81c805ede0e9aab5a942d8587dcd0dc28ba17c7d9bf90faa61c2beb9f087b09f145b80612834575060408051808201909152600881526733b7bb32b93737b960c11b6020918201528351908401207f1e46cebd6689d8c64011118478db0c61a89aa2646c860df401de476fbf378983145b6128735760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b2103837b9b4ba34b7b760811b6044820152606401610718565b6040805180820190915260098152681c1c995cda59195b9d60ba1b6020918201528351908401207ff9535f3ad5cb1967f004db0548bc0a3c1255729f32a0180a66a788542ebe1a62016128d757604051806020016040528060008152509150612940565b60008251116129405760405162461bcd60e51b815260206004820152602f60248201527f526567696f6e20726571756972656420666f72206e6f6e2d707265736964656e60448201526e7469616c2063616e6469646174657360881b6064820152608401610718565b6010805490600061295083613b9a565b909155505060408051610100810182526010548082526020808301898152838501899052606084018890526080840187905260a08401869052600060c08501819052600160e086018190529381526008909252939020825181559251919291908201906129bd9082613db1565b50604082015160028201906129d29082613db1565b50606082015160038201906129e79082613db1565b50608082015160048201906129fc9082613db1565b5060a08201516005820190612a119082613db1565b5060c0820151600682015560e0909101516007909101805460ff1916911515919091179055601054600e80546001810182556000919091527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd018190556040517f1908f3f8bf9e04cbee388cdea6025f92e954127dec768c7e092afb158071f0d090612aa4908890879087908790613e95565b60405180910390a25050505050565b6000546001600160a01b03163314612add5760405162461bcd60e51b815260040161071890613d20565b600081118015612aef57506010548111155b612b325760405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a590818d85b991a59185d1948125160621b6044820152606401610718565b6000908152600860205260409020600701805460ff19169055565b6001600160a01b0381166000908152600560209081526040808320815160a081018352815460ff808216151583526101009091041615159381019390935260018101805485946060948594859488949192840191612baa90613ae1565b80601f0160208091040260200160405190810160405280929190818152602001828054612bd690613ae1565b8015612c235780601f10612bf857610100808354040283529160200191612c23565b820191906000526020600020905b815481529060010190602001808311612c0657829003601f168201915b50505050508152602001600282018054612c3c90613ae1565b80601f0160208091040260200160405190810160405280929190818152602001828054612c6890613ae1565b8015612cb55780601f10612c8a57610100808354040283529160200191612cb5565b820191906000526020600020905b815481529060010190602001808311612c9857829003601f168201915b50505091835250506003918201546001600160a01b0316602091820152604080518381526080810190915292935082016060803683375050506001600160a01b03881660009081526009602081905260408083208151681c1c995cda59195b9d60ba1b8152928301525190819003602901902054825192945060ff1691849190612d4157612d41613c55565b9115156020928302919091018201526001600160a01b0388166000908152600990915260409081902090516639b2b730ba37b960c91b815260070190815260405190819003602001902054825160ff9091169083906001908110612da757612da7613c55565b9115156020928302919091018201526001600160a01b0388166000908152600990915260409081902090516733b7bb32b93737b960c11b815260080190815260405190819003602001902054825160ff9091169083906002908110612e0e57612e0e613c55565b9115156020928302919091018201528151908201516040830151606090930151919990985091965094509092509050565b6005602052600090815260409020805460018201805460ff8084169461010090940416929190612e6e90613ae1565b80601f0160208091040260200160405190810160405280929190818152602001828054612e9a90613ae1565b8015612ee75780601f10612ebc57610100808354040283529160200191612ee7565b820191906000526020600020905b815481529060010190602001808311612eca57829003601f168201915b505050505090806002018054612efc90613ae1565b80601f0160208091040260200160405190810160405280929190818152602001828054612f2890613ae1565b8015612f755780601f10612f4a57610100808354040283529160200191612f75565b820191906000526020600020905b815481529060010190602001808311612f5857829003601f168201915b505050600390930154919250506001600160a01b031685565b6000546001600160a01b03163314612fb85760405162461bcd60e51b815260040161071890613d20565b6000805460ff600160a01b808304821615810260ff60a01b1990931692909217928390556040517f793ad8eb8c2b97317dead028ac9839d1020670c14e6c520939e8e3584e1a6f889361303393900490911690604080825260069082015265766f74696e6760d01b6060820152901515602082015260800190565b60405180910390a1565b6000600c8360405161304f9190613d04565b90815260200160405180910390208260405161306b9190613d04565b908152602001604051809103902054905092915050565b6000546001600160a01b031633146130ac5760405162461bcd60e51b815260040161071890613d20565b600f80546001810182556000919091527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802016130e88282613db1565b50600a816040516130f99190613d04565b908152604080519182900360209081018320805460018101825560009182529082902084840190935260098452681c1c995cda59195b9d60ba1b9184019190915201906131469082613db1565b50600a816040516131579190613d04565b9081526040805191829003602090810183208054600181018255600091825290829020848401909352600784526639b2b730ba37b960c91b9184019190915201906131a29082613db1565b50600a816040516131b39190613d04565b9081526040805191829003602090810183208054600181018255600091825290829020848401909352600884526733b7bb32b93737b960c11b9184019190915201906131ff9082613db1565b5050565b6000546001600160a01b0316331461322d5760405162461bcd60e51b815260040161071890613d20565b6000805460ff600160a81b808304821615810260ff60a81b1990931692909217928390556040517f793ad8eb8c2b97317dead028ac9839d1020670c14e6c520939e8e3584e1a6f8893613033939004909116906040808252600c908201526b3932b3b4b9ba3930ba34b7b760a11b6060820152901515602082015260800190565b600d81815481106132be57600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b038116600090815260096020526040808220905161330c90681c1c995cda59195b9d60ba1b815260090190565b9081526040519081900360200190205460ff16801561336657506001600160a01b0382166000908152600960205260409081902090516639b2b730ba37b960c91b81526007019081526040519081900360200190205460ff165b80156133ae57506001600160a01b0382166000908152600960205260409081902090516733b7bb32b93737b960c11b81526008019081526040519081900360200190205460ff165b92915050565b6000805b600f5481101561341c578280519060200120600f82815481106133dd576133dd613c55565b906000526020600020016040516133f49190613b8e565b60405180910390200361340a5750600192915050565b8061341481613b9a565b9150506133b8565b50600092915050565b60006020828403121561343757600080fd5b5035919050565b60005b83811015613459578181015183820152602001613441565b50506000910152565b6000815180845261347a81602086016020860161343e565b601f01601f19169290920160200192915050565b6020815260006134a16020830184613462565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156134e6576134e66134a8565b604052919050565b600082601f8301126134ff57600080fd5b81356001600160401b03811115613518576135186134a8565b61352b601f8201601f19166020016134be565b81815284602083860101111561354057600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561356f57600080fd5b81356001600160401b0381111561358557600080fd5b613591848285016134ee565b949350505050565b600081518084526020808501945080840160005b838110156135c9578151875295820195908201906001016135ad565b509495945050505050565b6020815260006134a16020830184613599565b600080604083850312156135fa57600080fd5b82356001600160401b0381111561361057600080fd5b61361c858286016134ee565b95602094909401359450505050565b600082825180855260208086019550808260051b84010181860160005b8481101561367657601f19868403018952613664838351613462565b98840198925090830190600101613648565b5090979650505050505050565b60a08152600061369660a0830188613599565b82810360208401526136a8818861362b565b905082810360408401526136bc818761362b565b905082810360608401526136d0818661362b565b905082810360808401526136e48185613599565b98975050505050505050565b60006101008a835280602084015261370a8184018b613462565b9050828103604084015261371e818a613462565b905082810360608401526137328189613462565b905082810360808401526137468188613462565b905082810360a084015261375a8187613462565b60c0840195909552505090151560e0909101529695505050505050565b6000806040838503121561378a57600080fd5b82356001600160401b03808211156137a157600080fd5b6137ad868387016134ee565b935060208501359150808211156137c357600080fd5b506137d0858286016134ee565b9150509250929050565b600080600080608085870312156137f057600080fd5b5050823594602084013594506040840135936060013592509050565b6020815260006134a1602083018461362b565b6001600160a01b0384168152821515602082015260606040820181905260009061384b90830184613462565b95945050505050565b80356001600160a01b038116811461386b57600080fd5b919050565b60006020828403121561388257600080fd5b6134a182613854565b60c08152600061389e60c0830189613599565b82810360208401526138b0818961362b565b905082810360408401526138c4818861362b565b905082810360608401526138d8818761362b565b905082810360808401526138ec8186613599565b9150508260a0830152979650505050505050565b6000806040838503121561391357600080fd5b61391c83613854565b915060208301356001600160401b0381111561393757600080fd5b6137d0858286016134ee565b600080600080600060a0868803121561395b57600080fd5b85356001600160401b038082111561397257600080fd5b61397e89838a016134ee565b9650602088013591508082111561399457600080fd5b6139a089838a016134ee565b955060408801359150808211156139b657600080fd5b6139c289838a016134ee565b945060608801359150808211156139d857600080fd5b6139e489838a016134ee565b935060808801359150808211156139fa57600080fd5b50613a07888289016134ee565b9150509295509295909350565b8515158152600060208615158184015260a06040840152613a3860a0840187613462565b8381036060850152613a4a8187613462565b8481036080860152855180825283870192509083019060005b81811015613a81578351151583529284019291840191600101613a63565b50909a9950505050505050505050565b8515158152841515602082015260a060408201526000613ab460a0830186613462565b8281036060840152613ac68186613462565b91505060018060a01b03831660808301529695505050505050565b600181811c90821680613af557607f821691505b602082108103613b1557634e487b7160e01b600052602260045260246000fd5b50919050565b60008154613b2881613ae1565b60018281168015613b405760018114613b5557613b84565b60ff1984168752821515830287019450613b84565b8560005260208060002060005b85811015613b7b5781548a820152908401908201613b62565b50505082870194505b5050505092915050565b60006134a18284613b1b565b600060018201613bba57634e487b7160e01b600052601160045260246000fd5b5060010190565b604081526000808454613bd381613ae1565b8060408601526060600180841660008114613bf55760018114613c0f57613c40565b60ff1985168884015283151560051b880183019550613c40565b8960005260208060002060005b86811015613c375781548b8201870152908401908201613c1c565b8a018501975050505b50505050506020929092019290925292915050565b634e487b7160e01b600052603260045260246000fd5b60006020808385031215613c7e57600080fd5b82516001600160401b0380821115613c9557600080fd5b818501915085601f830112613ca957600080fd5b815181811115613cbb57613cbb6134a8565b8060051b9150613ccc8483016134be565b8181529183018401918481019088841115613ce657600080fd5b938501935b838510156136e457845182529385019390850190613ceb565b60008251613d1681846020870161343e565b9190910192915050565b60208082526022908201527f4f6e6c792061646d696e2063616e20706572666f726d2074686973206163746960408201526137b760f11b606082015260800190565b601f821115613dac57600081815260208120601f850160051c81016020861015613d895750805b601f850160051c820191505b81811015613da857828155600101613d95565b5050505b505050565b81516001600160401b03811115613dca57613dca6134a8565b613dde81613dd88454613ae1565b84613d62565b602080601f831160018114613e135760008415613dfb5750858301515b600019600386901b1c1916600185901b178555613da8565b600085815260208120601f198616915b82811015613e4257888601518255948401946001909101908401613e23565b5085821015613e605787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b604081526000613e836040830185613462565b828103602084015261384b8185613462565b608081526000613ea86080830187613462565b8281036020840152613eba8187613462565b90508281036040840152613ece8186613462565b90508281036060840152613ee28185613462565b97965050505050505056fe06aca0c52a34e6980ffb24fab743f5c3edaa8d60cd5fe7f5995877abd141e59ea264697066735822122049f4fd7ea5ac36b02f83b46a48a83595d08fc800c26ab79240a54232a49db75564736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "votingActive",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 10,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "registrationActive",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 12,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "registrationStart",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 14,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "registrationEnd",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 16,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "votingStart",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 18,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "votingEnd",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 51,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "voters",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Voter)29_storage)"
      },
      {
        "astId": 55,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "nationalIdToAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 59,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "addressUsed",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 64,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "candidates",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(Candidate)46_storage)"
      },
      {
        "astId": 70,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "hasVotedForPosition",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_bool))"
      },
      {
        "astId": 75,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "regionPositions",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_string_storage)dyn_storage)"
      },
      {
        "astId": 79,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "totalVotesByPosition",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 85,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "totalVotesByRegion",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_string_memory_ptr,t_uint256))"
      },
      {
        "astId": 88,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "voterAddresses",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 91,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "candidateIds",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 94,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "regions",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 97,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "candidateCount",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 100,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "voterCount",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(string => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      "t_mapping(t_address,t_struct(Voter)29_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct YourContract.Voter)",
        "numberOfBytes": "32",
        "value": "t_struct(Voter)29_storage"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_string_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => string[])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_string_memory_ptr,t_uint256))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(string => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Candidate)46_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct YourContract.Candidate)",
        "numberOfBytes": "32",
        "value": "t_struct(Candidate)46_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Candidate)46_storage": {
        "encoding": "inplace",
        "label": "struct YourContract.Candidate",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/YourContract.sol:YourContract",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 33,
            "contract": "contracts/YourContract.sol:YourContract",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 35,
            "contract": "contracts/YourContract.sol:YourContract",
            "label": "party",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 37,
            "contract": "contracts/YourContract.sol:YourContract",
            "label": "position",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 39,
            "contract": "contracts/YourContract.sol:YourContract",
            "label": "region",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 41,
            "contract": "contracts/YourContract.sol:YourContract",
            "label": "imageUrl",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 43,
            "contract": "contracts/YourContract.sol:YourContract",
            "label": "voteCount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 45,
            "contract": "contracts/YourContract.sol:YourContract",
            "label": "isActive",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Voter)29_storage": {
        "encoding": "inplace",
        "label": "struct YourContract.Voter",
        "members": [
          {
            "astId": 20,
            "contract": "contracts/YourContract.sol:YourContract",
            "label": "isRegistered",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 22,
            "contract": "contracts/YourContract.sol:YourContract",
            "label": "hasVoted",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 24,
            "contract": "contracts/YourContract.sol:YourContract",
            "label": "region",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 26,
            "contract": "contracts/YourContract.sol:YourContract",
            "label": "nationalId",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 28,
            "contract": "contracts/YourContract.sol:YourContract",
            "label": "voterAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}